-- Supprimer toutes les classes de la base de donn√©es
DROP TABLE IF EXISTS DEPOT;
DROP TABLE IF EXISTS QUESTION;
DROP TABLE IF EXISTS REPONSE;
DROP TABLE IF EXISTS QCM;
DROP TABLE IF EXISTS TYPE;
DROP TABLE IF EXISTS TAG;
DROP TABLE IF EXISTS UTILISATEUR;
DROP TABLE IF EXISTS ETUDIANT;
DROP TABLE IF EXISTS ROLE;
DROP TABLE IF EXISTS composer;
DROP TABLE IF EXISTS entrainer;
DROP TABLE IF EXISTS lier_tag_depot;
DROP TABLE IF EXISTS lier_tag_question;
DROP TABLE IF EXISTS niveau;
DROP TABLE IF EXISTS acces_depot;

CREATE TABLE "DEPOT"
(
    ID             INTEGER      not null
        primary key autoincrement,
    TITRE          TEXT not null,
    DESCRIPTION    TEXT not null,
    status         boolean      not null,
    DATE_OUVERTURE datetime     not null,
    DATE_FERMETURE datetime     not null,
    CREATEUR       TEXT
    constraint DEPOT_UTILISATEUR_USER_LOGIN_fk
        references UTILISATEUR
);


CREATE TABLE QCM (
 ID INT PRIMARY KEY,
 TITRE TEXT NOT NULL,
 DESCRIPTION TEXT NOT NULL,
 CREATEUR TEXT NOT NULL,
 EST_PUBLIC BOOLEAN NOT NULL,
 CONSTRAINT FK_CREATEUR FOREIGN KEY (CREATEUR) REFERENCES UTILISATEUR(USER_LOGIN)
);

CREATE TABLE "QUESTION"
(
    ID             INTEGER
        primary key autoincrement,
    LABEL          TEXT not null,
    ETAT           TEXT  not null,
    TYPE           TEXT  not null
        constraint FK_QUESTION_TYPE
            references TYPE,
    ID_UTILISATEUR NUMBER(10)   not null
        constraint FK_QUESTION_UTILISATEUR
            references UTILISATEUR,
    DIFFICULTE     TEXT         not null,
    ID_DEPOT       INTEGER
        constraint QUESTION_DEPOT_ID_fk
            references DEPOT,
    check (DIFFICULTE in ('facile', 'moyen', 'difficile')),
    check (ETAT in ('A_VERIFIER', 'A_MODIFIER', 'ACCEPTE'))
);

CREATE TABLE REPONSE (
 ID INTEGER PRIMARY KEY AUTOINCREMENT,
 LABEL TEXT NOT NULL,
 ETAT_VERITE BOOLEAN NOT NULL,
 QUESTION_ID INT NOT NULL,
 CONSTRAINT FK_QUESTION_REPONSE FOREIGN KEY (QUESTION_ID) REFERENCES QUESTION(ID)
);

CREATE TABLE ROLE (
  ROLE_ID integer primary key autoincrement,
  ROLE_NAME text not null
);

CREATE TABLE TAG (
 LABEL TEXT PRIMARY KEY,
 CREATEUR TEXT NOT NULL,
 CONSTRAINT FK_CREATEUR FOREIGN KEY (CREATEUR) REFERENCES UTILISATEUR(USER_LOGIN)
);

CREATE TABLE TYPE (
    LABEL TEXT PRIMARY KEY
);

CREATE TABLE UTILISATEUR (
 USER_LOGIN text primary key,
 USER_FIRST_NAME text not null,
 USER_LAST_NAME text not null,
 USER_EMAIL text not null,
 USER_PASSWORD text not null,
 USER_ROLE_ID integer not null references ROLE(ROLE_ID),
 USER_TD integer default 0,
 USER_TP integer default 0,

 unique (USER_EMAIL)
);

CREATE TABLE "acces_depot"(
  ID int not null,
  ID_UTILISATEUR int not null,
  A_ACCES boolean not null,
  primary key (ID, ID_UTILISATEUR),
  foreign key (ID) references DEPOT(ID),
  foreign key (ID_UTILISATEUR) references UTILISATEUR(USER_LOGIN)
);

CREATE TABLE composer (
    ID_QCM INT NOT NULL,
    ID_QUESTION INT NOT NULL,
    NB_TENTATIVES_TOTAL INT NOT NULL,
    NB_TENTATIVES_REUSSIES INT NOT NULL,
    CONSTRAINT FK_QCM_COMPOSER FOREIGN KEY (ID_QCM) REFERENCES QCM(ID),
    CONSTRAINT FK_QUESTION_COMPOSER FOREIGN KEY (ID_QUESTION) REFERENCES QUESTION(ID),
    PRIMARY KEY (ID_QCM, ID_QUESTION)
);

CREATE TABLE entrainer (
   UTILISATEUR TEXT NOT NULL,
   QCM INT NOT NULL,
   TEMPS_PASSE INT NOT NULL,
   SCORE NUMBER(5,2) NOT NULL,
   CONSTRAINT FK_UTILISATEUR_ENTRAINER FOREIGN KEY (UTILISATEUR) REFERENCES UTILISATEUR(USER_LOGIN),
   CONSTRAINT FK_QCM_ENTRAINER FOREIGN KEY (QCM) REFERENCES QCM(ID),
   PRIMARY KEY (UTILISATEUR, QCM)
);

CREATE TABLE lier_tag_depot(
    tag_id int(11) not null,
    depot_id int(11) not null,
    primary key (tag_id, depot_id),
    foreign key (tag_id) references tag(LABEL),
    foreign key (depot_id) references DEPOT(id)
);

CREATE TABLE lier_tag_question (
   LABEL_TAG TEXT NOT NULL,
   ID_QUESTION INT NOT NULL,
   CONSTRAINT FK_TAG_LIEE FOREIGN KEY (LABEL_TAG) REFERENCES TAG(LABEL),
   CONSTRAINT FK_QUESTION_LIEE FOREIGN KEY (ID_QUESTION) REFERENCES QUESTION(ID),
   PRIMARY KEY (LABEL_TAG, ID_QUESTION)
);

CREATE TABLE niveau (
    LABEL_TAG TEXT NOT NULL,
    ID_QCM INT NOT NULL,
    VALEUR INT NOT NULL,
    CONSTRAINT FK_TAG_NIVEAU FOREIGN KEY (LABEL_TAG) REFERENCES TAG(LABEL),
    CONSTRAINT FK_QCM_NIVEAU FOREIGN KEY (ID_QCM)  REFERENCES QCM(ID),
    PRIMARY KEY (LABEL_TAG, ID_QCM)
);


create table if not exists ETUDIANT (
    ETUDIANT_LOGIN text primary key references UTILISATEUR (USER_LOGIN),
    TD integer not null,
    TP integer not null
);



insert into TYPE (LABEL) values ('Choix unique');
insert into TYPE (LABEL) values ('Choix multiple');
insert into TYPE (LABEL) values ('Texte');
insert into TYPE (LABEL) values ('FlashCard');


drop table QUESTION
